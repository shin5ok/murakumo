package Murakumo::Controller::VPS::Define;
use Moose;
use namespace::autoclean;

BEGIN {extends 'Catalyst::Controller'; }

=head1 NAME

Murakumo::Controller::VPS::Define - Catalyst Controller

=head1 DESCRIPTION

Catalyst Controller.

=head1 METHODS

=cut


=head2 index

=cut

use Carp;
use JSON;
use Data::Dumper;
use Path::Class;

sub index :Path :Args(0) {
    my ( $self, $c ) = @_;

    $c->response->body('Matched Murakumo::Controller::VPS::Define in VPS::Define.');
}

sub list :Local {
  my ($self, $c) = @_;
  my $project_id   = $c->request->query_params->{'project_id'};
  my $define_model = $c->model('VPS_Define');
  $c->stash->{vps_list} = $define_model->list( $project_id );

  return $c->forward( $c->view('JSON') );

}

sub clone :Local {
  my ($self, $c) = @_;
  $c->log->debug("clone start");
  my $params = $c->request->body_params;
  $c->log->debug(Dumper $params);

  no strict 'refs';

  my $define_model = $c->model('VPS_Define');
  my $vps_model    = $c->model('VPS');
  my $ip_model     = $c->model('IP');

  my $org_uuid     = $params->{org_uuid};

  if ($vps_model->is_active_vps( $org_uuid )) {
    $c->stash->{message} = "vps($org_uuid) is already active";
    $c->stash->{result}  = 0;
    return $c->forward( $c->view('JSON') );

  }

  my $utils        = Murakumo::CLI::Utils->new;
  my $dst_uuid     = $utils->create_uuid;
  my $reserve_uuid = $utils->create_uuid;

  $params->{dst_uuid} = $dst_uuid;

  # ipを予約
  if (exists $params->{'assign_ip'}
         and $params->{'assign_ip'}
           and exists $params->{vlan_id}) {
    my ($ip, $mask, $gw) = $ip_model->reserve_ip( { reserve_uuid => $reserve_uuid, vlan_id => $params->{vlan_id} } );
    if (! $ip) {
      croak "ip reserve error";
    }
    # 取得した ip他のパラメータをクエリにセット
    $params->{reserve_uuid} = $reserve_uuid;
    $params->{ip}   = $ip;
    $params->{mask} = $mask;
    $params->{gw}   = $gw;
  }

  my $r;
  local $@;
  eval {
    $r = $define_model->record_cloning( $org_uuid, { uuid => $dst_uuid, instance_status => undef, } );
  };

  if (! $r or $@) {
    my $error_message      = "record_cloning error";
    $@ and $error_message .= "(@)";

    $c->stash->{result}  = 0;
    $c->stash->{message} = $error_message;
    warn $error_message;

    return $c->forward('JSON');

  }

  warn "clone $org_uuid => $dst_uuid";

  $params->{mac}            = $r->{mac};
  $params->{dst_image_path} = $r->{dst_image_path};
  $params->{src_image_path} = $r->{src_image_path};
  warn Dumper $params;
  $c->detach( '/node/job/vps/clone/' );

}

sub remove_commit :Local {
  my ($self, $c) = @_;
  my $params = $c->request->body_params;
  warn Dumper $params;

  no strict 'refs';

  my $define_model       = $c->model('VPS_Define');
  my $disk_define_model  = $c->model('DiskDefine');
  my $iface_define_model = $c->model('InterfaceDefine');
  my $ip_model           = $c->model('IP');

  my $project_id   = $params->{project_id};
  my $vps_uuid     = $params->{uuid};

  my $result       = $params->{result} || 0;

  local $@;
  eval {
    if ($result) { 
      $define_model->all_deleted( $vps_uuid );
    } else {
      $define_model->all_cancel_deleted( $vps_uuid );
    }
  };
  
  if ($@) {
    warn $@;
    return 0;
  }
  return 1;

}


# Node から コールバックされる用のapi
sub commit :Local {
  my ($self, $c) = @_;

  my $params = $c->request->body_params;

  no strict 'refs';

  my $define_model       = $c->model('VPS_Define');
  my $disk_define_model  = $c->model('DiskDefine');
  my $iface_define_model = $c->model('InterfaceDefine');
  my $ip_model           = $c->model('IP');

  my $project_id   = $params->{project_id};
  my $vps_uuid     = $params->{vps_uuid};
  my $reserve_uuid = $params->{reserve_uuid};

  my $result       = $params->{result} || 0;

  local $@;
  eval {

    no strict 'refs';

    $c->stash->{result} = $result;

    if ( ! $result ) {
      local $Data::Dumper::Terse = 1;
      $c->stash->{message} = sprintf "vps define clone() miss (%s)", Dumper $params;
      $@ and $c->stash->{message} .= " eval error $@";

      # 本当は、IPのmodelに切り出して、forwardした方がきれいかも

      # 予約したipをキャンセル
      $ip_model->cancel_reserve_ip( { reserve_uuid => $reserve_uuid } );

      $define_model->cancel_define( $project_id, $vps_uuid );

    } else {

      # 本当は、IPのmodelに切り出して、forwardした方がきれいかも
      # ipを確定
      my $return_param = {
                           reserve_uuid => $reserve_uuid,
                           vps_uuid     => $vps_uuid,
                         };
      $ip_model->commit_assign_ip( $return_param );

      $define_model->commit_define( $project_id, $vps_uuid );

      $c->stash->{param}= $return_param;
    }

  };

  if ($@) {
    warn "eval error: $@";
    $c->stash->{error} = $@;
  }

  return $c->forward( $c->view('JSON') );

}

sub create_or_modify: Private {

  my ($self, $c) = @_;
  my $mode   = $c->request->args->[0];
  my $params = $c->request->body_params;

  warn Dumper $params;

  my $args = {};
  my $json;
  local $@;
  eval {
    my $json_data = decode_json $params->{json};
    warn Dumper $json_data;
    $json = $json_data->{root};
  };
  if ($@) {
    $c->stash->{message} = "*** json parameter convert failure ($@)";
    $c->stash->{result}  = 0;
    return $c->forward( $c->view('JSON') );
  }

  no strict 'refs';

  my $uuid         = $json->{uuid};
  my $project_id   = $json->{project_id};
  my $all_data_ref = $json;

  my $utils = Murakumo::CLI::Utils->new;

  my $vps_define_model = $c->model('VPS_Define');
  if ($mode eq 'modify') {
    if (! $vps_define_model->info($uuid)) {
      $c->stash->{message} = "*** vps $uuid is not found...";
      $c->stash->{result}  = 0;
      return $c->forward( $c->view('JSON') );
    }
  } else {
    # create で uuidが指定されなかったら自動生成
    if (! $uuid) {
      $uuid = $utils->create_uuid;
      warn "controller /vps/define/create/ create uuid: $uuid";
    }
  }

  my $ip_model = $c->model('IP');
  my $reserve_uuid;

  local $@;
  eval {

    if ( $vps_define_model->create_or_modify($project_id, $uuid, $all_data_ref) ) {

      my $info = $vps_define_model->info_include_tmp($uuid);
      my $disks_ref = $info->{disks};
      warn "----- ", __PACKAGE__ , "#create_or_modify -----";
      warn $uuid;
      warn Dumper $params;

      # disk のハッシュを JSON化
      $params->{disks} = encode_json $disks_ref;
      # vps自体のjsonデータはいらない
      delete $params->{json};

      # ipを予約
      if (exists $params->{'assign_ip'}
             and $params->{'assign_ip'}
               and exists $params->{vlan_id}) {

        $reserve_uuid = $utils->create_uuid;
        my @vlan_ids = split /,/, $params->{vlan_id};
        for my $vlan_id ( @vlan_ids ) {
        my @ip_params = $ip_model->reserve_ip( { reserve_uuid => $reserve_uuid, vlan_id => $params->{vlan_id} } );
          if (@ip_params != 3) {
            warn "ip of vlan $vlan_id reserve none";
          }
        }
        
        # 取得した reserve_uuid をクエリにセット

       }
       $params->{reserve_uuid} = $reserve_uuid;
     
     } else {
       croak "vps define create error (project: $project_id, uuid: $uuid)";

     }

   };

   if (! $@) {

      $params->{vps_uuid} = $uuid;

      # disk の作成処理が入っていたら
      # ip の コミット、キャンセルは、callback に任せる
      if (exists $all_data_ref->{disk} and @{$all_data_ref->{disk}} > 0) {
        # ['create'] をいったん空に
        $c->request->args([]); 
        $c->detach( '/node/job/vps/create/' );

      } else {
        if ($mode eq 'create') {
          $c->stash->{message} = "vps $uuid is created(no disk create)";
        } else {
          $c->stash->{message} = "vps $uuid is modified(no disk modified)";
        }

        my $ip_param_commit = {
                                reserve_uuid => $reserve_uuid,
                                vps_uuid     => $uuid,
                              };
        $ip_model->commit_assign_ip( $ip_param_commit );
        $c->stash->{result}  = 1;
        return $c->forward( $c->view('JSON') );
      }

    }

    # ip をキャンセル
    if ($reserve_uuid) {
      $ip_model->cancel_reserve_ip( { reserve_uuid => $reserve_uuid } );
    }

    $c->stash->{message} = "vps $uuid is create error";
    $c->stash->{message}.= "($@)" if $@;
    $c->stash->{result}  = 0;

    return $c->forward( $c->view('JSON') );

}

sub create :Local {
  my ($self, $c) = @_;
  $c->detach('create_or_modify', ['create']);
}

sub modify :Local {
  my ($self, $c) = @_;
  $c->detach('create_or_modify', ['modify']);
}

sub remove :Local {
  my ($self, $c) = @_;
  my $uuid = $c->request->body_params->{uuid};
  my $define_model = $c->model('VPS_Define');
  my $vps_model    = $c->model('VPS');

  $c->{stash}->{result} = 0;

  # 起動しているかチェック
  if ($vps_model->is_active_vps( $uuid )) {
    $c->{stash}->{message} = "vps $uuid is already active... delete error.";
    return $c->forward( $c->view('JSON') );
  }

  my $info = $define_model->info( $uuid );
  my @paths;
  for my $disk_info ( @{$info->{disks}} ) {
    push @paths, $disk_info->{image_path};
  }
  # 削除すべきディスクのパスをセット
  $c->request->body_params->{json} = encode_json { root => { disks => \@paths } };

  my $delete_result = $define_model->delete($uuid);

  no strict 'refs';
  warn "-----";
  warn Dumper $delete_result;
  warn "-----";
  if ($delete_result->{ok}) {
    $c->{stash}->{message} = "vps $uuid has deleted.";
    $c->{stash}->{result}  = 1;

  } else {
    $c->{stash}->{message} = "vps $uuid has delete error.";

  }

  if ($delete_result->{deleted}->{disk} > 0) {
    $c->detach('/node/job/vps/remove/');
  } else {
    $c->forward( $c->view('JSON') );
  }
}


=head1 AUTHOR

shingo

=head1 LICENSE

This library is free software. You can redistribute it and/or modify
it under the same terms as Perl itself.

=cut

__PACKAGE__->meta->make_immutable;

1;
