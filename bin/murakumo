#!/usr/bin/env murakumo-perl

use strict;
use warnings;
use Carp;
use LWP::UserAgent ();
use HTTP::Request::Common qw(POST GET);
use JSON;
use Text::ASCIITable;
use DateTime;
use Data::Dumper;
use URI::Escape;
use URI ();
use opts;

our $VERSION  = q(0.11);
our $base_url = exists $ENV{MURAKUMO_API_URI}
              ? $ENV{MURAKUMO_API_URI}
              : 'http://127.0.0.1:3000/';

opts my $name            => 'Str',
     my $org             => 'Str',
     my $uuid            => 'Str',
     my $project_id      => 'Str',
     my $cpu_number      => 'Int',
     my $memory          => 'Int',
     my $set_network     => 'Str',
     my $storage_tag     => 'Str',
     my $storage_uuid    => 'Str',
     my $no_virtio       => 'Bool',
     my $assign_ip       => 'Bool',
     my $clock           => 'Str',
     my $verbose         => 'Bool',
     my $ip              => 'Str',
     my $disk            => 'Str',
     my $api_key         => 'Str',
     my $admin_key       => 'Str',
     my $add_ip          => 'Int',
     my $vlan_id         => 'Str',
     my $vnc_password    => 'Str',
     my $cdrom           => 'Str',
     my $tag             => 'Str',
     my $clean_traffic   => 'Bool',
     my $disk_cache      => 'Str',
     my $dst_node        => 'Str',
     my $extra_info      => 'Str',
     my $public_template => 'Int',
     my $cdrom_boot      => 'Bool',
     my $new_project_id  => 'Str',
     my $proxy_vlan_id   => 'Str',
     my $node            => 'Str';

our $debug = exists $ENV{DEBUG}
           ? $ENV{DEBUG}
           : 0;

if (exists $ENV{MURAKUMO_BASE_URL}) {
  $base_url = $ENV{MURAKUMO_BASE_URL};
}

# 引数を優先
if (! defined $project_id
      and exists $ENV{MURAKUMO_PROJECT_ID}) {
  $project_id = $ENV{MURAKUMO_PROJECT_ID};
}

if (not defined $project_id) {
  croak "*** project_id is undefined";
}

# 引数を優先
if (! defined $admin_key
      and exists $ENV{MURAKUMO_ADMIN_KEY}) {
  $admin_key = $ENV{MURAKUMO_ADMIN_KEY};
}
elsif (! defined $api_key
         and exists $ENV{MURAKUMO_API_KEY}) {
  $api_key   = $ENV{MURAKUMO_API_KEY};
}

my @args   = @ARGV;
my $method = shift @args || qq{};
# - は _ に変換する
$method =~ s/\-/_/g;

my $wwwua = LWP::UserAgent->new;
$wwwua->ssl_opts( verify_hostname => 0, SSL_verify_mode => q{SSL_VERIFY_NONE} );
$wwwua->timeout( 10 );

my @results = __PACKAGE__->$method( @args );

if (@results > 1) {
  no strict 'refs';
  my $t = Text::ASCIITable->new;
  my @cols = map { local $1; /([^\|]+)/; $1 } @{$results[0]};
  $t->setCols( @cols );
  $t->alignCol($_, q{left}) for @cols;

  for my $col ( @{$results[0]} ) {
    if (my ($name, $size) = $col =~ /(.+)\|(\d+)/) {
      $t->setColWidth( $name, $size, 1 );
    }
  }

  $t->setColWidth('message', 30, 1);
  for my $row ( @{$results[1]} ) {
    $t->addRow($row);
  }
  print $t;

} else {
  print $results[0], "\n";

}

sub _create_uri {
  our $base_url;
  my $action = shift;
  $base_url or croak "*** base_url cannot get";

  my $uri = URI->new( $base_url );
  $uri->path( $action );
  my %param_key = ();

  $verbose
    and $param_key{verbose} = 1;

  if ($admin_key) {
    $param_key{admin_key} = $admin_key;
  }
  elsif ($api_key) {
    $param_key{key} = $api_key;
  }

  $uri->query_form( %param_key );
  return $uri;
}

sub vps_template_info {
  vps_define_info( template => 1 );

}

sub vps_define_info {

  defined $uuid
    or croak "*** uuid parameter is not found";

  my %option = @_ >= 2 ? @_ : ();

  my $uri = _create_uri( "/$project_id/vps/define/info/$uuid/" );
  if (exists $option{template} and $option{template}) {
    $uri = _create_uri( "/$project_id/template/info/$uuid/" );

  }

  my $response    = _www_get( $uri );
  my $content_ref = decode_json $response->content;
  my $info        = $content_ref->{data};
  local $Data::Dumper::Terse = 1;

  no strict 'refs';
  my @cols = qw( param_name value );

  my @rows;
  my @param_names = qw(
                        project_id uuid name tag cpu_number memory clock
                        cdrom_path vnc_password extra_info
                      );

  for my $param_name ( @param_names ) {

    my $value = $info->{$param_name};

    if ($param_name eq 'vnc_password' and ! $verbose) {
      $value = '**********';
    }

    if ($param_name eq 'extra_info') {
      $value = uri_unescape $info->{$param_name};
    }

    push @rows, [ $param_name, $value ];

  }

  my $disk_number = 1;
  for my $disk ( @{$info->{disks}} ) {
    my $string = "";
    for my $name ( qw( image_path driver size ) ) {
      if (exists $disk->{$name}) {
        $string .= sprintf "%-16s:%s\n", $name, $disk->{$name};
      }
    }
    push @rows, [
           "disk$disk_number",
           $string,
         ];
    $disk_number++;
  }

  my $iface_number = 1;
  for my $iface ( @{$info->{interfaces}} ) {
    my $string = "";
    for my $name ( qw( mac driver vlan_id org_vlan_id ip ) ) {

      if (exists $iface->{$name}) {
        if ($name eq 'ip') {
          for my $ip_param ( keys %{$iface->{ip}}) {
            my $p = $iface->{ip}->{$ip_param};

            if (ref $p eq 'ARRAY') {
              $p = join ", ", @$p;
            }
            $string .= sprintf "%-16s:%s\n", $ip_param, $p;
          }

        } else {
          $string .= sprintf "%-16s:%s\n", $name, $iface->{$name};
        }
      }
    }
    push @rows, [
           "interface$iface_number",
           $string,
         ];
    $iface_number++;

  }

  return (\@cols, \@rows);

}

sub vps_cdrom {
  my $uri = _create_uri( "/$project_id/node/run/vps/cdrom/" );

  defined $uuid
    or croak "*** uuid parameter is not found";

  my %param = (
    cdrom_path => $cdrom,
    uuid       => $uuid,
  );

  my $response = _www_json_post( $uri, \%param );

  return _r($response);

}

sub vps_list {

  my $uri = _create_uri( "/$project_id/vps/list/" );

  my %param_hash;

  my $response = _www_get( $uri );
  my $data = decode_json $response->content;

  my @cols = ('name','uuid','node', 'vnc_port', 'cpu','memory', 'update_time', 'state', );
  my @rows;
  for my $x ( @{$data->{data}} ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;

  }
  if ($node) {
    @rows = grep { $_->[2] eq $node } @rows;
  }

  # 列名、行の配列リファレンス
  return ( \@cols, \@rows );

}

sub env {
  my @param_names = (
                      'MURAKUMO_PROJECT_ID',
                      'MURAKUMO_API_URI',
                      'MURAKUMO_API_KEY',
                      'MURAKUMO_ADMIN_KEY',
                      'DEBUG',
                    );

  my @rows;
  no strict 'refs';
  for my $key ( @param_names ) {
    push @rows, [ $key, $ENV{$key} // qq{} ];

  }

  return ( [qw(name value)], \@rows );

}


sub vps_console_list {

  my $uri = _create_uri( "/$project_id/vps/console_list/" );

  my %param_hash;

  my $response = _www_get( $uri );
  my $data = decode_json $response->content;

  my @cols = ('name','uuid','console', );
  my @rows;
  for my $x ( @{$data->{data}} ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;

  }

  # 列名、行の配列リファレンス
  return ( \@cols, \@rows );

}


sub vps_list_all {

  _is_has_admin_key();
  my $uri_base = "/admin/vps_list_all";
  # 使い勝手がよくないのでいったん外した
  # $uri_base .= "/$project_id" if $project_id;

  my $uri = _create_uri( $uri_base );

  my %param_hash;

  my $response = _www_get( $uri );
  my $data = decode_json $response->content;

  my @cols = ('project_id', 'name','uuid','node', 'vnc_port', 'cpu','memory', 'update_time', 'state', );
  my @rows;
  for my $x ( @{$data->{data}} ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;

  }
  if ($node) {
    @rows = grep { $_->[2] eq $node } @rows;
  }

  # 列名、行の配列リファレンス
  return ( \@cols, \@rows );

}


sub vps_define_list {

  my ($cols, $vps_rows) = vps_list();
  my %vps_status = map { $_->[1] => $_->[2] } @$vps_rows;

  my $uri = _create_uri( "/$project_id/vps/define/list/" );
  if(defined $tag) {
    my %hash = $uri->query_form;
    $hash{tag} = $tag;
    $uri->query_form( %hash );

  }

  my $response = _www_get( $uri );
  my $data = decode_json $response->content;

  no strict 'refs';

  my @cols = ('name', 'uuid', 'current_node', 'cpu_number', 'memory', 'update_time', 'regist_time');
  my @rows;
  my @lists = map {
                $_->{current_node} = exists $vps_status{$_->{uuid}}
                                   ? $vps_status{$_->{uuid}}
                                   : qq{};
                $_;

              } @{$data->{data}};

  for my $x ( @lists ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;
  }
  # 列名、行の配列リファレンス
  return ( \@cols, [ sort { $a->[4] cmp $b->[4] } @rows ] );

}

sub vps_template_clone {
  my $uri   = _create_uri( "/$project_id/template/clone/$uuid/" );
  _clone($uri);
}


sub vps_define_clone {
  my $uri   = _create_uri( "/$project_id/vps/define/clone/$uuid/" );
  _clone($uri);
}


sub _clone {
  my $uri = shift;
  my %param = (
    vlan_id      => $vlan_id,
  );

  defined $storage_uuid and
    $param{storage_uuid} = $storage_uuid;

  defined $storage_tag and
    $param{storage_tag} = $storage_tag;

  defined $assign_ip and
    $param{assign_ip}   = 1;

  defined $set_network and
    $param{set_network} = $set_network;

  defined $name and
    $param{name}        = $name;

  defined $tag and
    $param{tag}         = $tag;

  my $response = _www_json_post( $uri, \%param );

  return _r($response);

}


sub vps_boot {
  goto &vps_boot_by_uuid;
}

sub vps_boot_by_uuid {

  defined $uuid
    or croak "*** uuid parameter is not found";

  my $url  = sprintf "/%s/vps/boot/%s/", $project_id, $uuid;
  # my $url  = sprintf "/%s/vps/boot", $project_id;
  my $uri  = _create_uri( $url );
  my $uuid = $uuid;
  my $set_node = defined $node
               ? $node
               : "";
  my $response = _www_json_post(
                                 $uri, {
                                         node          => $set_node,
                                         clean_traffic => $clean_traffic || 0,
                                         cdrom_boot    => $cdrom_boot,
                                         disk_cache    => $disk_cache,
                                       }
                                );

  return _r($response);
}

sub vps_shutdown {

  defined $uuid
    or croak "*** uuid parameter is not found";
  my $uri = _create_uri( "/$project_id/vps/shutdown/$uuid/" );
  my %param = ();

  my $response = _www_json_post( $uri, \%param );

  return _r($response);

}

sub vps_terminate {

  defined $uuid
    or croak "*** uuid parameter is not found";
  my $uri = _create_uri( "/$project_id/vps/terminate/$uuid/" );
  my %param = ();

  my $response = _www_json_post( $uri, \%param );

  return _r($response);

}

sub vps_define_create {
  _vps_define_create_or_modify("create");
}

sub vps_define_modify {

  defined $uuid
    or croak "*** uuid parameter is not found";

  _vps_define_create_or_modify("modify");
}

sub _vps_define_create_or_modify {
  my $mode = shift;

  my $mode_uri;
  if ($mode eq "create") {
    $mode_uri = "create";
  } else {
    $mode_uri = "modify";
  }

  my @disks;
  if ($disk) {
    @disks = map { $_ * 1024000 } split /,/, $disk;
  }

  my @interfaces;
  if ($vlan_id) {
    my $number = 0;
    for my $vlan_number (split /,/, $vlan_id) {
      my $ip;
      if ($vlan_number =~ /^([^:]):(.+)/) {
        $vlan_number = $1;
        $ip     = $2;
      }

      my $interface = +{ 
                          driver  => $no_virtio ? "e1000" : "virtio",
                          vlan_id => $vlan_number,
                       };
      if ($ip) {
        $interface->{ip} = $ip;
      }
      push @interfaces, $interface;
      $number++;
    }

  }

  my $vps = +{};

  defined $name
    and $vps->{name}            = $name;
  defined $memory
    and $vps->{memory}          = $memory;
  defined $cpu_number
    and $vps->{cpu_number}      = $cpu_number;
  defined $clock
    and $vps->{clock}           = $clock;
  defined $cdrom
    and $vps->{cdrom_path}      = $cdrom || "";
  defined $vnc_password
    and $vps->{vnc_password}    = $vnc_password;
  defined $tag
    and $vps->{tag}             = $tag;
  defined $extra_info
    and $vps->{extra_info}      = uri_escape $extra_info;
  defined $public_template
    and $vps->{public_template} = $public_template;

  my $vps_params = {
     spec         => $vps,
     disk         => \@disks,
     interface    => \@interfaces,
  };

  defined $storage_uuid and
    $vps_params->{storage_uuid} = $storage_uuid;

  defined $storage_tag and
    $vps_params->{storage_tag}  = $storage_tag;


  my $request_uri = qq{/$project_id/vps/define/$mode_uri/};
  $uuid and $request_uri .= "$uuid/";

  my $uri = _create_uri( $request_uri );

  my $params_all = {
                     vps          => $vps_params,
                     assign_ip    => $assign_ip,
                     vlan_id      => $vlan_id,
                     driver       => $no_virtio ? "ide" : "virtio",
                   };
  my $response = _www_json_post( $uri, $params_all );

  return _r($response);

}


sub vps_define_remove {

  defined $uuid
    or croak "*** uuid parameter is not found";

  my $uri = _create_uri( "/$project_id/vps/define/remove/$uuid/" );
  my $response = _www_json_post( $uri );

  return _r($response);
}


sub vps_migration {

  defined $uuid
    or croak "*** uuid parameter is not found";

  my $uri = _create_uri( "/$project_id/vps/migration/$uuid/" );
  $dst_node
    or croak "dst node is error";

  my $response = _www_json_post( $uri, { dst_node => $dst_node, } );
  return _r($response);

}

sub vps_boot_cleanup {

  defined $uuid
    or croak "*** uuid parameter is not found";
  my $uri = _create_uri( "/$project_id/vps/boot_tmp_cleanup/$uuid/" );
  my $response = _www_json_post( $uri, {} );
  return _r($response);

}


sub vps_add_ip {

  defined $uuid
    or croak "*** uuid parameter is not found";
  my $uri    = _create_uri( "/$project_id/vps/define/add_ip/$uuid/" );
  my $number = $add_ip || 1;

  my $response = _www_json_post( $uri, { vlan_id => $vlan_id, add_ip_number => $number } );
  return _r($response);

}


sub node_list {
  my $uri = _create_uri( "/$project_id/node/list/" );

  my $response = _www_get( $uri );

  my @cols = qw( name uuid cpu_total mem_total mem_free loadavg vps_number cpu_vps_used auto_select update_time );

  my $data = decode_json $response->content;
  my @rows;
  for my $x ( @{$data->{data}} ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;

  }

  return (\@cols, \@rows);
}

sub _r { goto \&_response }


sub project_list {
  _is_has_admin_key();

  my @cols = ('project_id', 'api_key', 'regist_time');

  my $uri = _create_uri( "/admin/project_list" );
  my $response = _www_get( $uri );

  my $result = decode_json $response->content;

  my @rows;
  for my $x ( @{$result->{data}} ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;

  }

  return (\@cols, \@rows);

}

sub _response {
  my ($response) = @_;

  if ($response->is_success) {
    return $response->content;

  } else {
    my $content = $response->content || qq{};
    my $code    = $response->code;
    $content   .= sprintf "(%s)", $code if $code;
    return $content;

  }

}


sub vps_define_list_all {
  _is_has_admin_key();

  my ($cols, $vps_rows) = vps_list_all();
  my %vps_status = map { $_->[2] => $_->[3] } @$vps_rows;

  my $uri_base = "/admin/vps_define_list_all";
  # 使い勝手がよくないのでいったん外した
  # $uri_base .= "/$project_id" if $project_id;

  my $uri = _create_uri( $uri_base );

  my $response = _www_get( $uri );

  my $data = decode_json $response->content;

  no strict 'refs';

  my @cols = ('project_id', 'name', 'uuid', 'current_node', 'cpu_number', 'memory', 'update_time', 'regist_time');
  my @rows;
  my @lists = map {
                $_->{current_node} = exists $vps_status{$_->{uuid}}
                                   ? $vps_status{$_->{uuid}}
                                   : qq{};
                $_;

              } @{$data->{data}};

  for my $x ( @lists ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;
  }
  # 列名、行の配列リファレンス
  return ( \@cols, [ sort { $a->[4] cmp $b->[4] } @rows ] );

}


sub _is_has_admin_key {
  $admin_key
    or croak "*** cannot get admin_key";
}


sub vps_template_list {
  my $uri = _create_uri("/$project_id/template/list/");

  my $response = _www_get( $uri );

  my @cols = ('tag', 'name', 'uuid', 'cpu_number', 'memory', 'update_time', 'regist_time');

  my $json = decode_json $response->content;

  my @rows;
  my $data = $json->{data};

  no strict 'refs';
  for my $x ( @$data ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;

  }

  return (\@cols, \@rows);

}


sub ip_list {
  _is_has_admin_key();

  my @cols = ('ip', 'project_id', 'name', 'vps_uuid', 'secondary', 'update_time');

  my $uri = _create_uri( "/admin/ip_with_name/$vlan_id" );
  my $response = _www_get( $uri );

  my $result = decode_json $response->content;

  my @rows;
  for my $x ( @{$result->{data}} ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;

  }

  return (\@cols, \@rows);

}


sub job_list {
  $project_id ||= '';
  $uuid       ||= '';
  my $uri = _create_uri( "/$project_id/job/list/$uuid" );
  my $response = _www_get( $uri );

  my $data = decode_json $response->content;

  my @cols = qw(job_uuid result message update_time request_job);

  my @rows;
  for my $x ( @{$data->{data}} ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;

  }

  # 最後の要素の request_job カラムには 幅に制限を付ける
  $cols[$#cols] = q(request_job|30);

  return (\@cols, \@rows);

}


sub vps_define_proxy_vlan {

  defined $uuid
    or croak "*** uuid parameter is not found";

  my $uri = _create_uri( "/$project_id/vps/define/proxy_vlan_id/$uuid" );
  my $response = _www_json_post( $uri, { proxy_vlan_id => $proxy_vlan_id, vlan_id => $vlan_id } );

  return _r( $response );

}


sub project_register {
  my $uri = _create_uri( "/admin/project_register" );

  my $response = _www_json_post( $uri, { project_id => $new_project_id } );
  my $data     = decode_json $response->content;

  no strict 'refs';
  if ($data->{result} == 1) {
    return (
             [ qw( project_id api_key ) ],
             [
               [
                 $data->{data}->{project_id},
                 $data->{data}->{api_key},
               ],
             ],
           );
  } else {
    return _r( $response );
  }

}

sub storage_list {
  my $uri = _create_uri( "/$project_id/storage/list/" );

  my $response = _www_get( $uri );

  my $data = decode_json $response->content;

  my @cols = qw( uuid storage_tag type export_path host mount_path priority avail_size iowait regist_time );

  my @rows;
  for my $x ( @{$data->{data}} ) {
    my @p;

    push @p, $x->{$_} for ( @cols );
    push @rows, \@p;

  }

  return (\@cols, \@rows);

}

sub network_list {
  my $uri = _create_uri( "/$project_id/ip/list_count/" );

  my $response = _www_get( $uri );

  my $data = decode_json $response->content;

  my @cols          = qw( vlan_id network netmask total used free used_rate );
  my @cols_for_rows = @cols[1 .. $#cols - 1];

  my $list = $data->{data};
  my @rows;
  for my $x ( sort { $a cmp $b } keys %$list ) {
    my $vlan_list = $list->{$x};

    my @p = ( $x );

    for my $name ( @cols_for_rows ) {
      push @p, $vlan_list->{$name};
    }
    my $used_rate = sprintf "%d %%", $vlan_list->{used} / $vlan_list->{total} * 100;
    push @p, $used_rate;

    push @rows, \@p;
  }

  return (\@cols, \@rows);

}

our $AUTOLOAD;
sub AUTOLOAD {
  warn $AUTOLOAD , " args error";
  exit 255;
}

sub _www_get {
  my ($uri_string, $param) = @_;
  my $uri = URI->new( $uri_string );
  $param and $uri->query_form( %$param );

  if ($debug) {
    local $Data::Dumper::Terse = 1;
    printf "+--- request debug -----------------------------------------------------------------------------------------------+\n";
    printf "method: GET" . "\n";
    printf "uri:    %s\n", $uri;
    printf "+-----------------------------------------------------------------------------------------------------------------+\n";
  }

  my $response = $wwwua->get( $uri );
  if (! $response->is_success) {
    croak sprintf "response error code: %s\n", $response->code;
  }

  if ($debug >= 2) {

    printf "+--- response debug ----------------------------------------------------------------------------------------------+\n";
    printf "%s", $response->content;
    printf "+-----------------------------------------------------------------------------------------------------------------+\n";
  }

  return $response;
}

sub _www_json_post {
  my $uri   = shift;
  my $params = shift || {};

  # POSTには、nodeの指定は強制的に
  defined $node
    and $params->{node} = $node;

  my $request = HTTP::Request->new( 'POST', $uri );
  $request->header('Content-Type' => 'application/json');
  $request->content( encode_json $params );

  my $json = JSON->new->allow_nonref;
  if ($debug) {

    my $json_params = $json->pretty->encode( $params );

    printf "+--- request debug -----------------------------------------------------------------------------------------------+\n";
    printf "method      : POST" . "\n";
    printf "uri         : %s\n", $uri;
    printf "params(json):\n";
    printf "%s", $json_params;
    printf "+-----------------------------------------------------------------------------------------------------------------+\n";
  }

  my $response = $wwwua->request( $request );
  if (! $response->is_success) {
    croak sprintf "response error code: %s\n", $response->code;
  }

  if ($debug >= 2) {

    printf "+--- response debug ----------------------------------------------------------------------------------------------+\n";
    printf "%s", $response->content;
    printf "+-----------------------------------------------------------------------------------------------------------------+\n";
  }

  return $response;
}

__END__





